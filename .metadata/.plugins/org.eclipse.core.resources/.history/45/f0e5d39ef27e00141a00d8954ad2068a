package org.exampl.neuralnet;

import org.exampl.neuralnet.Helpers;

class NeuralNetwork {
	private int numInput;
	private int numHidden;
	private int numOutput;

	private double[] inputs;
	private double[][] ihWeights; // input-to-hidden
	private double[] ihSums;
	private double[] ihBiases;
	private double[] ihOutputs;

	private double[][] hoWeights; // hidden-to-output
	private double[] hoSums;
	private double[] hoBiases;
	private double[] outputs;

	private double[] oGrads; // output gradients for back-propagation
	private double[] hGrads; // hidden gradients for back-propagation

	private double[][] ihPrevWeightsDelta; // for momentum with back-propagation
	private double[] ihPrevBiasesDelta;

	private double[][] hoPrevWeightsDelta;
	private double[] hoPrevBiasesDelta;

	public NeuralNetwork(int numInput, int numHidden, int numOutput) {
		this.numInput = numInput;
		this.numHidden = numHidden;
		this.numOutput = numOutput;

		inputs = new double[numInput];
		ihWeights = Helpers.MakeMatrix(numInput, numHidden);
		ihSums = new double[numHidden];
		ihBiases = new double[numHidden];
		ihOutputs = new double[numHidden];
		hoWeights = Helpers.MakeMatrix(numHidden, numOutput);
		hoSums = new double[numOutput];
		hoBiases = new double[numOutput];
		outputs = new double[numOutput];
		oGrads = new double[numOutput];
		hGrads = new double[numHidden];
		ihPrevWeightsDelta = Helpers.MakeMatrix(numInput, numHidden);
		ihPrevBiasesDelta = new double[numHidden];
		hoPrevWeightsDelta = Helpers.MakeMatrix(numHidden, numOutput);
		hoPrevBiasesDelta = new double[numOutput];
	}

	public void SetWeights(double[] weights) throws Exception {
		int numWeights = (numInput * numHidden) + (numHidden * numOutput)
				+ numHidden + numOutput;
		if (weights.length != numWeights)
			throw new Exception(
					"The weights array length: "
							+ weights.length
							+ " does not match the total number of weights and biases: "
							+ numWeights);

		int k = 0; // points into weights param

		for (int i = 0; i < numInput; ++i)
			for (int j = 0; j < numHidden; ++j)
				ihWeights[i][j] = weights[k++];

		for (int i = 0; i < numHidden; ++i)
			ihBiases[i] = weights[k++];

		for (int i = 0; i < numHidden; ++i)
			for (int j = 0; j < numOutput; ++j)
				hoWeights[i][j] = weights[k++];

		for (int i = 0; i < numOutput; ++i)
			hoBiases[i] = weights[k++];
	}

	public double[] ComputeOutputs(double[] xValues) throws Exception {
		if (xValues.length != numInput)
			throw new Exception("Inputs array length " + inputs.length
					+ " does not match NN numInput value " + numInput);

		for (int i = 0; i < numHidden; ++i)
			ihSums[i] = 0.0;
		for (int i = 0; i < numOutput; ++i)
			hoSums[i] = 0.0;

		for (int i = 0; i < xValues.length; ++i)
			// copy x-values to inputs
			this.inputs[i] = xValues[i];

		// System.out.println("Inputs:");
		// Helpers.ShowVector(this.inputs);

		// System.out.println("input-to-hidden weights:");
		// Helpers.ShowMatrix(this.ihWeights, -1);

		for (int j = 0; j < numHidden; ++j)
			// compute input-to-hidden weighted sums
			for (int i = 0; i < numInput; ++i)
				ihSums[j] += this.inputs[i] * ihWeights[i][j];

		// System.out.println("input-to-hidden sums:");
		// Helpers.ShowVector(this.ihSums);

		// System.out.println("input-to-hidden biases:");
		// Helpers.ShowVector(ihBiases);

		for (int i = 0; i < numHidden; ++i)
			// add biases to input-to-hidden sums
			ihSums[i] += ihBiases[i];

		System.out.println("\ninput-to-hidden sums after adding i-h biases:");
		Helpers.ShowVector(this.ihSums);

		for (int i = 0; i < numHidden; ++i)
			// determine input-to-hidden output
			// ihOutputs[i] = StepFunction(ihSums[i]); // step function
			ihOutputs[i] = SigmoidFunction(ihSums[i]);

		// System.out.println("\ninput-to-hidden outputs after sigmoid:");
		// Helpers.ShowVector(this.ihOutputs);

		// System.out.println("hidden-to-output weights:");
		// Helpers.ShowMatrix(hoWeights, -1);

		for (int j = 0; j < numOutput; ++j)
			// compute hidden-to-output weighted sums
			for (int i = 0; i < numHidden; ++i)
				hoSums[j] += ihOutputs[i] * hoWeights[i][j];

		// System.out.println("hidden-to-output sums:");
		// Helpers.ShowVector(hoSums);

		// System.out.println("hidden-to-output biases:");
		// Helpers.ShowVector(this.hoBiases);

		for (int i = 0; i < numOutput; ++i)
			// add biases to input-to-hidden sums
			hoSums[i] += hoBiases[i];

		System.out.println("hidden-to-output sums after adding h-o biases:");
		Helpers.ShowVector(this.hoSums);

		for (int i = 0; i < numOutput; ++i)
			// determine hidden-to-output result
			this.outputs[i] = HyperTanFunction(hoSums[i]);

		double[] result = new double[numOutput];
		result = this.outputs;

		return result;
	} // ComputeOutputs

	private double StepFunction(double x) {
		if (x > 0.0)
			return 1.0;
		else
			return 0.0;
	}

	public void UpdateWeights(double[] tValues, double eta, double alpha) {

	}

	public double[] GetWeights() {

		return hoBiases;

	}

	private double SigmoidFunction(double x) {
		if (x < -45.0)
			return 0.0;
		else if (x > 45.0)
			return 1.0;
		else
			return 1.0 / (1.0 + Math.exp(-x));
	}

	private double HyperTanFunction(double x) {
		if (x < -10.0)
			return -1.0;
		else if (x > 10.0)
			return 1.0;
		else
			return Math.tanh(x);
	}

} // class NeuralNetwork