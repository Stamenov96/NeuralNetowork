package org.exampl.neuralnet;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

//import android.graphics.Bitmap;
//import android.util.Log;

public class NeuralNetworksProgram {

	static int label;

	public static void main(String[] args) throws Exception {
		
		
		
		Double error = 0.0;	
		double eta = 100000; 
		double alpha = 90; 
	
		int numofinput = 784;
		int numofhidden = 1000;
		int numofoutput = 10;
		double[] bgp= new double [numofoutput];
		

		NeuralNetwork nn = new NeuralNetwork(numofinput,numofhidden, numofoutput);
		
		
		String imagess = "/home/stefo/Desktop/NeuralNetwork/NeuralNetowork/NeuralNet/src/org/exampl/neuralnet/train-images.idx3-ubyte";
		String labelss = "/home/stefo/Desktop/NeuralNetwork/NeuralNetowork/NeuralNet/src/org/exampl/neuralnet/train-labels.idx1-ubyte";

		DataInputStream labels = new DataInputStream(new FileInputStream(
				labelss));
		DataInputStream images = new DataInputStream(new FileInputStream(
				imagess));
		int magicNumber = labels.readInt();
		if (magicNumber != 2049) {
			System.err.println("Label file has wrong magic number: "
					+ magicNumber + " (should be 2049)");
			System.exit(0);
		}
		magicNumber = images.readInt();
		if (magicNumber != 2051) {
			System.err.println("Image file has wrong magic number: "
					+ magicNumber + " (should be 2051)");
			System.exit(0);
		}
		int numLabels = labels.readInt();
		int numImages = images.readInt();
		int numRows = images.readInt();
		int numCols = images.readInt();
		if (numLabels != numImages) {
			System.err
					.println("Image file and label file do not contain the same number of entries.");
			System.err.println("  Label file contains: " + numLabels);
			System.err.println("  Image file contains: " + numImages);
			System.exit(0);
		}

		// long start = System.currentTimeMillis();
		int numLabelsRead = 0;
		int numImagesRead = 0;

		while (labels.available() > 0 && numLabelsRead < numLabels) {
			byte label = labels.readByte();
			// System.out.print(label+" L ");
			numLabelsRead++;
			double[][] image = new double[numCols][numRows];
			double[] xValues = new double[numCols * numRows];
			int itter = 0;
			for (int colIdx = 0; colIdx < numCols; colIdx++) {
				for (int rowIdx = 0; rowIdx < numRows; rowIdx++) {
					image[colIdx][rowIdx] = images.readUnsignedByte();
					image[colIdx][rowIdx] = (image[colIdx][rowIdx] / 255);
					xValues[itter] = image[colIdx][rowIdx];
					itter++;
				}
			}

			numImagesRead++;
			System.out.printf("===========================================");
			System.out.printf(numImagesRead + " " + label);
			System.out.println("============================================================");

			
				try {
					System.out.println("\nBegin Neural Network demo\n");



					String path = "/home/stefo/Desktop/";
					
					OutputStream fOut;
					File file = new File(path, "statsText.txt"); // the File to
																	// save to

					if (!file.exists() && !file.isFile()) {

						try {
							FileWriter out = new FileWriter(file);

							int size = (numofinput * numofhidden) + numofhidden
									+ (numofhidden * numofoutput) + numofoutput;
							for (int i = 0; i < size; i++) {
								double random = new Random().nextDouble();
								out.write(random + "\n");
							}
							out.flush();
							out.close();

						} catch (IOException e) {
							System.out.println("ERROR");
						}

					} else {
						System.out.println("FILE EXISTS");
					}

					Scanner scan = new Scanner(file);
					ArrayList<String> temps = new ArrayList<String>();

					int count = 0;
					while (scan.hasNext()) {
						String line = scan.nextLine();
						count++;
					}
					// System.out.println(count);
					// System.out.println("<<<<<<<<<<<COUNT<<<<<<<<<<<<");

					Scanner newscan = new Scanner(file);
					// System.out.println(">>>>>>" + count);
					// BigDecimal[] weights = new BigDecimal[count];
					double[] weights = new double[count];
					for (int i = 0; i < count; i++) {
						String line = newscan.nextLine();
						double a = Double.parseDouble(line);
						// weights[i] = new BigDecimal(a);
						weights[i] = a;
					}

					nn.SetWeights(weights);

					// double[] xValues = MNISTReader.main(args);
					double[] initialOutputs = nn.ComputeOutputs(xValues);
					double[] tValues = new double[10];
					for (int i = 0; i < tValues.length; i++) {
						tValues[i] = 0.0;
					}
					tValues[label] = 1;// target
					
					int ctr = 0;
					double[] yValues = nn.ComputeOutputs(xValues); // prime the
					
					for (int i = 0; i < numofoutput; i++) {
						bgp[i]+=(tValues[i]-yValues[i]);
					}
					
					error+= Error(tValues, yValues);
					System.out.println("ERRRORRR   " + error);

					System.out.println("End Neural Network demo\n");
				} catch (Exception ex) {
					System.out.println("Fatal: " + ex);

				}
			
		}

		System.out.println("BGP?");
		int ctr=0;
		while(error>0.01 && ctr<20){
			numLabelsRead=0;
			System.out.printf("error"+error);	
			nn.UpdateWeights(bgp, eta, alpha);
			for (int i = 0; i < bgp.length; i++) {
				bgp[i]=0;
			}
			System.out.printf("error"+error);
			
		//double[] yValues = nn.ComputeOutputs(xValues);			
		error = 0.0;
		
		while (labels.available() > 0 && numLabelsRead < numLabels) {
			byte label = labels.readByte();
			// System.out.print(label+" L ");
			numLabelsRead++;
			double[][] image = new double[numCols][numRows];
			double[] xValues = new double[numCols * numRows];
			int itter = 0;
			for (int colIdx = 0; colIdx < numCols; colIdx++) {
				for (int rowIdx = 0; rowIdx < numRows; rowIdx++) {
					image[colIdx][rowIdx] = images.readUnsignedByte();
					image[colIdx][rowIdx] = (image[colIdx][rowIdx] / 255);
					xValues[itter] = image[colIdx][rowIdx];
					itter++;
				}
			}

			//numImagesRead++;


			{
				try {
					System.out.println("\nBegin Neural Network demo\n");

//					int numofinput = numCols * numRows;
//
//					int numofhidden = 1000;
//					int numofoutput = 10;
//
//					NeuralNetwork nn = new NeuralNetwork(numofinput,
//							numofhidden, numofoutput);

					String path = "/home/stefo/Desktop/";
					
					OutputStream fOut;
					File file = new File(path, "statsText.txt"); // the File to
																	// save to

					if (!file.exists() && !file.isFile()) {

						try {
							FileWriter out = new FileWriter(file);

							int size = (numofinput * numofhidden) + numofhidden
									+ (numofhidden * numofoutput) + numofoutput;
							for (int i = 0; i < size; i++) {
								double random = new Random().nextDouble();
								out.write(random + "\n");
							}
							out.flush();
							out.close();

						} catch (IOException e) {
							System.out.println("ERROR");
						}

					} else {
						System.out.println("FILE EXISTS");
					}

					Scanner scan = new Scanner(file);
					ArrayList<String> temps = new ArrayList<String>();

					int count = 0;
					while (scan.hasNext()) {
						String line = scan.nextLine();
						count++;
					}
					// System.out.println(count);
					// System.out.println("<<<<<<<<<<<COUNT<<<<<<<<<<<<");

					Scanner newscan = new Scanner(file);
					// System.out.println(">>>>>>" + count);
					// BigDecimal[] weights = new BigDecimal[count];
					double[] weights = new double[count];
					for (int i = 0; i < count; i++) {
						String line = newscan.nextLine();
						double a = Double.parseDouble(line);
						// weights[i] = new BigDecimal(a);
						weights[i] = a;
					}

					nn.SetWeights(weights);

					// double[] xValues = MNISTReader.main(args);
					double[] initialOutputs = nn.ComputeOutputs(xValues);
					double[] tValues = new double[10];
					for (int i = 0; i < tValues.length; i++) {
						tValues[i] = 0.0;
					}
					tValues[label] = 1;// target
					
					
					double[] yValues = nn.ComputeOutputs(xValues); // prime the
																	// back-propagation
							for (int i = 0; i < yValues.length; i++) {
								bgp[i]+=tValues[i]-yValues[i];
							}
					//System.out.println("OUTPUTS:");
					// Helpers.ShowVector(yValues);

					//System.out
					//		.println("===========-------------------===========================");

					error+= Error(tValues, yValues);
					System.out.println("ERRRORRR   " + error);

					System.out.println("End Neural Network demo\n");
				} catch (Exception ex) {
					System.out.println("Fatal: " + ex);

				}
			}
		}
		ctr++;
		System.out.printf("ctr"+ctr);
		}
		

		
//nn.UpdateWeights(tValues, eta, alpha);
//yValues = nn.ComputeOutputs(xValues);


System.out.println("Best Weights Found");
double[] bestWeights = nn.GetWeights();


String path = "/home/stefo/Desktop/";

OutputStream fOut;
File file = new File(path, "statsText.txt"); 

try {
	FileWriter out = new FileWriter(file);
	for (int i = 0; i < bestWeights.length; i++) {
		out.write(Double.toString(bestWeights[i]) + "\n");
	}
	out.flush();
	out.close();

} catch (IOException e) {
	System.out.printf("weightsandbiases",
			"Exception in saving", e);
}


	} // Main

	static double Error(double[] tValues, double[] yValues) // sum absolute
															// error.
															// could put into
															// NeuralNetwork
															// class.

	{
		// System.out.println("TARGETS");
		// Helpers.ShowVector(target);
		double sum = 0.0;
		for (int i = 0; i < tValues.length; ++i)
			// sum =sum.add((tValues[i].subtract( yValues[i])).abs());
			sum += Math.abs(tValues[i] - yValues[i]);

		return sum;
	}
} // class NeuralNetworksProgram
// } // ns

// }
