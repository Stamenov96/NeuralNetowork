package org.exampl.neuralnet;

public class NeuralNetworksProgram {
	public static void main(String[] args) { 
	{
	      try
	      {
	        System.out.println("\nBegin Neural Network demo\n");

	        System.out.println("Creating a 3-input, 4-hidden, 2-output neural network");
	        System.out.println("Using sigmoid function for input-to-hidden activation");
	        System.out.println("Using tanh function for hidden-to-output activation");
	        NeuralNetwork nn = new NeuralNetwork(3, 4, 2);

	        double[] weights = new double[] {
	          0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2,
	          -2.0, -6.0, -1.0, -7.0,
	          1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0,
	          -2.5, -5.0 };
	        double[] targets = new double[]{
	        		 -0.85,0.75
	        };

	        System.out.println("\nWeights and biases are:");
	        Helpers.ShowVector(weights);

	        System.out.println("Loading neural network weights and biases");
	        nn.SetWeights(weights);

	        System.out.println("\nSetting inputs:");
	        double[] xValues = new double[] { 1.0, 2.0, 3.0 };
	        Helpers.ShowVector(xValues);
	        
	        System.out.println("Loading inputs and computing outputs");
	        double[] yValues = nn.ComputeOutputs(xValues);
	        
	        double[] gradients = nn.ComputeGradient(yValues, targets);
	        System.out.println("\nNeural network outputs are:");
	        Helpers.ShowVector(yValues);

	        System.out.println("End Neural Network demo\n");
	       // Console.ReadLine();
	      }
	      catch (Exception ex)
	      {
	        System.out.println("Fatal: " + ex);
	      //  Console.ReadLine();
	      }
	    } // Main

	  } // class NeuralNetworksProgram

	 


	 
	  
	} // ns

//}
