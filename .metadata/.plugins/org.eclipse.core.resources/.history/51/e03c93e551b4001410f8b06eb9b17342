package org.elsys.digitRecognition;


	import java.io.DataInputStream;
	import java.io.File;
	import java.io.FileInputStream;
	import java.io.FileWriter;
	import java.io.IOException;
	import java.io.OutputStream;
	import java.util.ArrayList;
	import java.util.Random;
	import java.util.Scanner;


	//import android.graphics.Bitmap;
	//import android.util.Log;


public class Training {		
		static int label;
		
		public static void main(String[] args) throws IOException {
			
		String imagess = "/DigitRecognition/src/org/elsys/digitRecognition/t10k-images.idx3-ubyte";
		String labelss = "/DigitRecognition/src/org/elsys/digitRecognition/t10k-labels.idx1-ubyte";
		
		DataInputStream labels = new DataInputStream(new FileInputStream(labelss));
		DataInputStream images = new DataInputStream(new FileInputStream(imagess));
		
		int magicNumber = labels.readInt();
		    if (magicNumber != 2049) {
		      System.err.println("Label file has wrong magic number: " + magicNumber + " (should be 2049)");
		      System.exit(0);
		    }
		    magicNumber = images.readInt();
		    if (magicNumber != 2051) {
		      System.err.println("Image file has wrong magic number: " + magicNumber + " (should be 2051)");
		      System.exit(0);
		    }
		    int numLabels = labels.readInt();
		    int numImages = images.readInt();
		    int numRows = images.readInt();
		    int numCols = images.readInt();
		    if (numLabels != numImages) {
		      System.err.println("Image file and label file do not contain the same number of entries.");
		      System.err.println("  Label file contains: " + numLabels);
		      System.err.println("  Image file contains: " + numImages);
		      System.exit(0);
		    }

		    int numLabelsRead = 0;
		    int numImagesRead = 0;

			int numofinput =numCols*numRows;
			int numofhidden=1000;
			int numofoutput=10;		
			NeuralNetwork nn = new NeuralNetwork(numofinput, numofhidden, numofoutput);
			int ctr=0;

			String path = "/DigitRecognition/src/org/elsys/digitRecognition/";
			File file = new File(path, "statsText2.txt"); // the File to save to
			
			if (!file.exists()&& !file.isFile()) {	
			try {
				FileWriter out = new FileWriter(file);

				int size = (numofinput * numofhidden) + numofhidden+(numofhidden * numofoutput) + numofoutput;
				for (int i = 0; i < size; i++) {
					double random = (new Random().nextDouble()*2-1)*0.1;
					//System.out.println(random);
					out.write(random + "\n");
				}
				out.flush();
				out.close();
				
			} catch (IOException e) {
				System.out.println("ERROR");
			}
			
			
			}else{System.out.println("FILE EXISTS");}
			
			
			
			Scanner scan = new Scanner(file);
			ArrayList<String> temps = new ArrayList<String>();

			int count = 0;
			while (scan.hasNext()) {
				String line = scan.nextLine();
				count++;
			}
			
			Scanner newscan = new Scanner(file);
			double[] weights = new double[count];
			for (int i = 0; i < count; i++) {
				String line = newscan.nextLine();
				double a = Double.parseDouble(line);
				weights[i]=a;
			}
			
			try {
				nn.SetWeights(weights);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		    while (labels.available() >0 && numLabelsRead < numLabels) {
		        byte label = labels.readByte();
		       // System.out.print(label+" L ");
		        numLabelsRead++;
		        double[][] image = new double[numCols][numRows];
		        double[] xValues = new double[numCols*numRows];
		        int itter = 0;
		        for (int colIdx = 0; colIdx < numCols; colIdx++) {
		          for (int rowIdx = 0; rowIdx < numRows; rowIdx++) {
		            image[colIdx][rowIdx] = images.readUnsignedByte();
		            image[colIdx][rowIdx]= (image[colIdx][rowIdx]/255);
		            xValues[itter]=image[colIdx][rowIdx];
		            itter++;
		          }
		        }
		        
		        numImagesRead++;
		    System.out.println("The "+numImagesRead+" from data set is "+label);
		    
			
				try {

					double[] tValues =new double[10];
					for (int i = 0; i < tValues.length; i++) {
						tValues[i]=0.0;
					}
					tValues[label]= 1;// target
					double eta = 0.0015;; // learning rate - controls the maginitude of
										// the increase in the change in weights.
										// found by trial and error.
					double alpha = 0.0004;//Math.pow(2,22);//90000; // momentum - to discourage oscillation.
											// found by trial and error.
				
					
					
					double[] yValues = nn.ComputeOutputs(xValues); // prime the
																	// back-propagation
																	// loop
					
					System.out.println("===========-------------------===========================");
					
					Double error = Error(tValues, yValues);	
					System.out.println("===================================================");
					System.out.println("iteration = " + ctr);
					System.out.println("Updating weights and biases using back-propagation");
					
					if(error>0.01){
						nn.UpdateWeights(tValues, eta, alpha);
					}
					
					System.out.println("===================================================");
					System.out.println("Error = " + error);
					System.out.println("===================================================");
					
					// Console.ReadLine();
				} catch (Exception ex) {
					System.out.println("Fatal: " + ex);
					// Console.ReadLine();
				}
				
				if (ctr==999 || ctr==5000 || ctr == 10000 || ctr==20000 || ctr == 50000 || ctr==59999) {
					double[] bestWeights = nn.GetWeights();
					
					
					try {
											FileWriter out = new FileWriter(file);
											for (int i = 0; i < bestWeights.length; i++) {
												out.write(Double.toString(bestWeights[i]) + "\n");
											}
										out.flush();
											out.close();
											
										} catch (IOException e) {
											System.out.printf("weightsandbiases", "Exception in saving", e);
										}
					System.out.println("BESTWEIGHTS SAVED");
				}
				
				ctr++;
			
		   
		    }
		    
		} // Main

		static double Error(double[] tValues, double[] yValues) // sum absolute error.
		{											
			double sum = 0.0;
			for (int i = 0; i < tValues.length; ++i)
				sum+=Math.abs(tValues[i]-yValues[i]);

			return sum;
		}
	}
